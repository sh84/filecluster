#!/usr/bin/env ruby

$:.unshift File.expand_path('../lib', File.dirname(__FILE__))
require 'psych'
require 'logger'
require 'optparse'
require 'filecluster'
require 'utils'
require 'daemon'

$all_storages         = []          # all storages
$storages             = []          # storages on current host
$tasks_copy           = {}          # copy tasks by storage name
$tasks_delete         = {}          # delete tasks by storage name
$curr_tasks           = []          # current tasks
$tasks_copy_threads   = {}          # copy threads by storage name
$tasks_delete_threads = {}          # delete threads by storage name
$check_threads        = {}          # check threads by storage name
$copy_count           = 0           # copy tasks count for current host
$copy_cont_avg        = 0           # copy tasks avg count for current host
$copy_speed           = 0           # copy tasks speed sum for current host
$exit_signal          = false 
$global_daemon_thread = nil
$update_tasks_thread  = nil
$run_tasks_thread     = nil

args = ARGV.clone
default_db_config = FC::DB.options_yml_path
descriptions = {
  :config      => {:short => 'c',  :full => 'config',    :default => default_db_config, :text => "path to db.yml file, default #{default_db_config}"},
  :log_level   => {:short => 'l',  :full => 'log_level', :default => 'info', :text => 'log level (fatal, error, warn, info or debug), default info'},
  :curr_host   => {:short => 'h', :full => 'host',       :default => FC::Storage.curr_host, :text => "Host for storages, default #{FC::Storage.curr_host}"}
}
desc = %q{Run FileCluster daemon.
Usage: fc-daemon [options]}
options = option_parser_init(descriptions, desc)
FC::Storage.instance_variable_set(:@uname, options[:curr_host]) if options[:curr_host] && options[:curr_host] != FC::Storage.curr_host

STDOUT.sync = true
$log = Logger.new(STDOUT)
$log.formatter = proc do |severity, datetime, progname, msg|
  "[#{datetime}] [#{severity}] [#{Thread.current.object_id}] #{msg}\n"
end
$log.level = Logger.const_get(options[:log_level].upcase)
$log.info('Started')

db_options = Psych.load(File.read(options[:config]))
FC::DB.connect_by_config(db_options.merge(:reconnect => true, :multi_threads => true))
$log.info('Connected to database')

def quit_on_quit
  Thread.new { $log.info('Exit signal') }.join
  $exit_signal = true
end
trap("TERM") {quit_on_quit}
trap("INT") {quit_on_quit}


start_time = Time.new.to_i
while true do
  if $exit_signal
    # keep check storage unit up until other tasks finished
    keep_alive_thread = Thread.new do
      loop do
        storages_check
        sleep FC::Var.get('daemon_cycle_time', 30).to_i
      end
    end
    $log.debug('wait tasks_threads')
    $tasks_copy_threads.each do|host, tasks| 
      tasks.each{|t| t.join}
    end
    $tasks_delete_threads.each do|host, tasks| 
      tasks.each{|t| t.join}
    end
    if $global_daemon_thread
      $log.debug('wait global_daemon_thread')
      $global_daemon_thread.join
    end
    keep_alive_thread.kill
    $log.info('Exit')
    if $exit_signal == :restart
      exec('ruby', __FILE__, *args)
    else
      exit
    end
  else
    run_global_daemon
    update_storages
    storages_check
    update_tasks
    run_tasks
  end
  $log.debug('sleep')
  sleep FC::Var.get('daemon_cycle_time', 30).to_i
  alive_time = Time.new.to_i - start_time
  if !$exit_signal && alive_time > FC::Var.get('daemon_restart_period', 86400).to_i
    $log.info("Self restart, #{alive_time} seconds up")
    $exit_signal = :restart
  end
end
